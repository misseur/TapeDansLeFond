'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (babel) {
  return {
    visitor: {
      Program: {
        exit: function exit(path, state) {
          path.traverse(removeTargetModuleReferences, state);
          path.scope.crawl();
          path.traverse(removeUnusedModulesReferences, state);
        }
      }
    }
  };
};

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var removeTargetModuleReferences = {
  ImportDeclaration: function ImportDeclaration(path, state) {
    var _state$opts$targets = state.opts.targets;
    var targets = _state$opts$targets === undefined ? [] : _state$opts$targets;
    var _path$node = path.node;
    var source = _path$node.source;
    var specifiers = _path$node.specifiers;


    var moduleSource = source.value;

    if (targets.indexOf(source.value) < 0) {
      return;
    }

    specifiers.forEach(function (specifier) {
      var importedIdentifierName = specifier.local.name;

      var _path$scope$getBindin = path.scope.getBinding(importedIdentifierName);

      var referencePaths = _path$scope$getBindin.referencePaths;


      referencePaths.forEach(function removeExpression(referencePath) {
        var pathToRemove = referencePath;
        do {
          if (pathToRemove.type === 'ExpressionStatement') {
            break;
          }
        } while (pathToRemove = pathToRemove.parentPath);

        pathToRemove.remove();
      });
    });

    path.remove();
  }
};

var removeUnusedModulesReferences = {
  ImportDeclaration: function ImportDeclaration(path, state) {

    var unusedWhitelist = state.opts.unusedWhitelist || [];
    var _path$node2 = path.node;
    var source = _path$node2.source;
    var specifiers = _path$node2.specifiers;


    var moduleSource = source.value;

    if (unusedWhitelist.indexOf(source.value) > -1) {
      return;
    }

    // don't remove imports with no specifiers as they certainly have side effects
    if (specifiers.length === 0) {
      return;
    }

    var usedSpecifiers = specifiers.reduce(function (usedSpecifiers, specifier) {

      var importedIdentifierName = specifier.local.name;

      var _path$scope$getBindin2 = path.scope.getBinding(importedIdentifierName);

      var referencePaths = _path$scope$getBindin2.referencePaths;


      if (referencePaths.length > 0) {
        return [].concat(_toConsumableArray(usedSpecifiers), [specifier]);
      }
      return usedSpecifiers;
    }, []);

    if (usedSpecifiers.length === 0) {
      path.remove();
    } else {
      // only keep used specifiers
      // path.node.specifiers = usedSpecifiers;
    }
  }
};
