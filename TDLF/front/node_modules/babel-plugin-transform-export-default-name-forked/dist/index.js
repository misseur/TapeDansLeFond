'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _lodash = require('lodash.camelcase');

var _lodash2 = _interopRequireDefault(_lodash);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (_ref) {
    var t = _ref.types;

    var isAnnonFunctionDecl = function isAnnonFunctionDecl(declaration) {
        return (declaration.type === 'FunctionExpression' || declaration.type === 'FunctionDeclaration') && !(declaration.id && declaration.id.name);
    };

    var isAnnonClassDecl = function isAnnonClassDecl(declaration) {
        return (declaration.type === 'ClassExpression' || declaration.type === 'ClassDeclaration') && !(declaration.id && declaration.id.name);
    };

    var isArrowFunctionDecl = function isArrowFunctionDecl(declaration) {
        return declaration.type === 'ArrowFunctionExpression';
    };

    var deduceName = function deduceName(pluginPass, scope) {
        var filename = pluginPass && pluginPass.file && pluginPass.file.opts && pluginPass.file.opts.filename;

        var name = filename;
        name = name && _path2.default.basename(name).replace(/\.jsx?$/, '');
        if (name === 'index') {
            var dirname = _path2.default.basename(_path2.default.dirname(filename));
            if (dirname && dirname !== '.') name = dirname;
        }
        name = name && (0, _lodash2.default)(name);

        if (/^[0-9]/.test(name)) {
            name = '_' + name;
        }

        if (!t.isValidIdentifier(name)) {
            throw Error('Invalid identifier "' + name + '".');
        }

        return resolveClashingName(name, scope);
    };

    var resolveClashingName = function resolveClashingName(name, scope) {
        var index = void 0,
            resolvedName = void 0;

        index = 0;
        resolvedName = name;
        while (scope.hasBinding(resolvedName) && index < 100) {
            resolvedName = name + index++;
        }
        if (index > 100) {
            throw Error('Couldn\'t resolve clashing name "' + name + '".');
        }
        return resolvedName;
    };

    return {
        visitor: {
            ExportDefaultDeclaration: function ExportDefaultDeclaration(path, pluginPass) {
                var declaration = path.node.declaration;

                if (isAnnonClassDecl(declaration) || isAnnonFunctionDecl(declaration)) {
                    // replace
                    declaration.id = t.identifier(deduceName(pluginPass, path.scope));
                }

                if (isArrowFunctionDecl(declaration)) {
                    path.get('declaration').arrowFunctionToShadowed();
                    declaration.id = t.identifier(deduceName(pluginPass, path.scope));
                }

                if (pluginPass && pluginPass.opts && pluginPass.opts.compose && t.isCallExpression(declaration) && declaration.arguments.length === 1 && t.isArrowFunctionExpression(declaration.arguments[0])) {
                    path.get('declaration.arguments.0').arrowFunctionToShadowed();
                    declaration.arguments[0].id = t.identifier(deduceName(pluginPass, path.scope));
                }
            }
        }
    };
};

module.exports = exports['default'];
//# sourceMappingURL=index.js.map
